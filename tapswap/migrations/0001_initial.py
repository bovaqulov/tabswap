# Generated by Django 5.1.1 on 2024-09-23 06:55

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('link', models.URLField(max_length=500)),
                ('coin', models.PositiveIntegerField(default=25000)),
                ('type', models.CharField(choices=[('telegram', 'Telegram'), ('video', 'Video'), ('others', 'Others')], max_length=50)),
                ('outtime', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_id', models.BigIntegerField(unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('coin', models.PositiveIntegerField(default=1000000)),
                ('som', models.PositiveIntegerField(default=1000)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserCoin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coin', models.PositiveIntegerField(default=0)),
                ('limit', models.PositiveIntegerField(default=500)),
                ('max_coin', models.PositiveIntegerField(default=500)),
                ('add', models.PositiveIntegerField(default=1)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_coin', to='tapswap.telegramuser')),
            ],
        ),
        migrations.CreateModel(
            name='RechargingSpeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=0)),
                ('get_coin', models.PositiveIntegerField(default=0)),
                ('recharging_speed', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_boosts', to='tapswap.usercoin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Multitap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=0)),
                ('get_coin', models.PositiveIntegerField(default=0)),
                ('multitap', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_boosts', to='tapswap.usercoin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InviteFriend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_done', models.BooleanField(default=False)),
                ('coin', models.PositiveIntegerField(default=5000)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invite_friend', to='tapswap.usercoin')),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(max_length=500)),
                ('invited_friends', models.ManyToManyField(related_name='invited_by', to='tapswap.invitefriend')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to='tapswap.usercoin')),
            ],
        ),
        migrations.CreateModel(
            name='EnergyLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(default=0)),
                ('get_coin', models.PositiveIntegerField(default=0)),
                ('energy_limit', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_boosts', to='tapswap.usercoin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DailyBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_bonus', to='tapswap.usercoin')),
            ],
        ),
        migrations.CreateModel(
            name='BoostTap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit', models.PositiveIntegerField(default=3)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boost_tap', to='tapswap.usercoin')),
            ],
        ),
        migrations.CreateModel(
            name='Admins',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admins', to='tapswap.usercoin')),
            ],
        ),
        migrations.CreateModel(
            name='UserTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_complete', models.BooleanField(default=False)),
                ('is_claimed', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tasks', to='tapswap.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tasks', to='tapswap.usercoin')),
            ],
        ),
        migrations.CreateModel(
            name='VoucherUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_claimed', models.BooleanField(default=False)),
                ('at_data', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voucher_users', to='tapswap.usercoin')),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='tapswap.voucher')),
            ],
        ),
    ]
